{"version":3,"sources":["../src/util/Results.ts"],"sourcesContent":["// export type Result<T> = {\n//   success: boolean\n//   value?: T\n//   error?: Error | string\n// }\n\nexport type ResultOk<T> = {\n  success: true\n  value: T\n}\n\nexport type ResultError = {\n  success: false\n  error: Error | string\n}\n\nexport type Result<T> = ResultOk<T> | ResultError;\n/**\n * If `result` is an error, throws it, otherwise ignored.\n * @param result \n * @returns \n */\nexport function throwResult<T>(result: Result<T>): result is ResultOk<T> {\n  if (result.success) return true;\n  if (typeof result.error === `string`) throw new Error(result.error);\n  throw result.error;\n}\n\nexport function resultToError(result:ResultError):Error {\n  if (typeof result.error === `string`) return new Error(result.error);\n  else return result.error\n}"],"mappings":";AAsBO,SAAS,YAAe,QAA0C;AACvE,MAAI,OAAO,QAAS,QAAO;AAC3B,MAAI,OAAO,OAAO,UAAU,SAAU,OAAM,IAAI,MAAM,OAAO,KAAK;AAClE,QAAM,OAAO;AACf;AAEO,SAAS,cAAc,QAA0B;AACtD,MAAI,OAAO,OAAO,UAAU,SAAU,QAAO,IAAI,MAAM,OAAO,KAAK;AAAA,MAC9D,QAAO,OAAO;AACrB;","names":[]}