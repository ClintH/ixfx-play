class a{#e=new Map;get(e){const t=this.#e.get(e);return t?[...t]:[]}size(e){const t=this.#e.get(e);return t?t.length:0}*iterateKey(e){const t=this.#e.get(e);t&&(yield*t.values())}*iterateValues(){for(const e of this.#e.keys())yield*this.iterateKey(e)}*iterateKeys(){yield*this.#e.keys()}addKeyedValues(e,...t){let s=this.#e.get(e);s||(s=[],this.#e.set(e,s)),s.push(...t)}deleteKeyValue(e,t){const s=this.#e.get(e);if(!s)return!1;const r=s.filter(n=>n!==t);return r.length===s.length?!1:(this.#e.set(e,r),!0)}clear(){this.#e.clear()}}class l{#e=new a;#t=!1;dispose(){this.#t||this.clearEventListeners()}get isDisposed(){return this.#t}fireEvent(e,t){if(this.#t)throw new Error("Disposed");for(const s of this.#e.iterateKey(e))s(t,this)}addEventListener(e,t){if(this.#t)throw new Error("Disposed");this.#e.addKeyedValues(e,t)}removeEventListener(e,t){this.#t||this.#e.deleteKeyValue(e,t)}clearEventListeners(){this.#t||this.#e.clear()}}export{l as S};
