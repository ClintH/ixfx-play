import{d as c}from"./result-aflA1LW7.js";const n=(r,t="",s="?",e)=>{if(r===null)return{success:!1,error:`Parameter '${s}' is null`,info:e};if(typeof r>"u")return{success:!1,error:`Parameter '${s}' is undefined`,info:e};if(Number.isNaN(r))return{success:!1,error:`Parameter '${s}' is NaN`,info:e};if(typeof r!="number")return{success:!1,error:`Parameter '${s}' is not a number (${JSON.stringify(r)})`,info:e};switch(t){case"finite":{if(!Number.isFinite(r))return{success:!1,error:`Parameter '${s} must be finite (Got: ${r})`,info:e};break}case"positive":{if(r<0)return{success:!1,error:`Parameter '${s}' must be at least zero (${r})`,info:e};break}case"negative":{if(r>0)return{success:!1,error:`Parameter '${s}' must be zero or lower (${r})`,info:e};break}case"aboveZero":{if(r<=0)return{success:!1,error:`Parameter '${s}' must be above zero (${r})`,info:e};break}case"belowZero":{if(r>=0)return{success:!1,error:`Parameter '${s}' must be below zero (${r})`,info:e};break}case"percentage":{if(r>1||r<0)return{success:!1,error:`Parameter '${s}' must be in percentage range (0 to 1). (${r})`,info:e};break}case"nonZero":{if(r===0)return{success:!1,error:`Parameter '${s}' must non-zero. (${r})`,info:e};break}case"bipolar":{if(r>1||r<-1)return{success:!1,error:`Parameter '${s}' must be in bipolar percentage range (-1 to 1). (${r})`,info:e};break}}return{success:!0,value:r,info:e}},i=(r,t="?",s)=>n(r,"percentage",t,s),u=(r,t="",s="?")=>c(n(r,t,s),()=>Number.isInteger(r)?{success:!0,value:r}:{success:!1,error:`Param '${s}' is not an integer`}),$=(r,t,s,e="?")=>typeof r!="number"?{success:!1,error:`Param '${e}' is not a number type. Got type: '${typeof r}' value: '${JSON.stringify(r)}'`}:Number.isNaN(r)?{success:!1,error:`Param '${e}' is not within range ${t}-${s}. Got: NaN`}:Number.isFinite(r)?r<t?{success:!1,error:`Param '${e}' is below range ${t}-${s}. Got: ${r}`}:r>s?{success:!1,error:`Param '${e}' is above range ${t}-${s}. Got: ${r}`}:{success:!0,value:r}:{success:!1,error:`Param '${e}' is not within range ${t}-${s}. Got: infinite`};export{$ as a,u as i,n,i as p};
