import"../../modulepreload-polyfill-B5Qt9EMX.js";import{f as n,l as s}from"../../dom-DCcQsJJW.js";import{m as f}from"../../io-D4vlQEz_.js";import{d as v}from"../../flow-2AOw9vu2.js";import"../../src-BeVDUOoq-B6OoJ3p3.js";import"../../src-C7XtfIer-DYL4nwfS.js";import"../../dist-DE4H3J9W-BscYlIcj.js";import"../../src-sHR31-XU-C1xj0KeO.js";const d=v(m,200),o=Object.freeze({inputLastEl:document.getElementById("inputLast"),inputLog:s("#inputLog",{timestamp:!0}),outputLog:s("#outputLog",{timestamp:!0}),mainLog:s("#mainLog",{timestamp:!0}),chkEvFilterCc:n.checkbox("#evFilterCc"),chkEvFilterPb:n.checkbox("#evFilterPb"),chkEvFilterNotes:n.checkbox("#evFilterNotes"),chkOutFollow:n.checkbox("#outFollow"),outChannel:n.numeric("#outChannel"),outVelocity:n.numeric("#outVelocity"),outCc:n.numeric("#outCc"),outNote:n.numeric("#outNote"),outNoteDuration:n.numeric("#outNoteDuration"),midi:new f.MidiManager});let p={inputDeviceSelEl:void 0,outputDeviceSelEl:void 0};function a(t){const{outputLog:i,midi:l}=o;i.log(t);try{l.send(t)}catch(u){i.error(u)}}const h=async()=>{const{midi:t}=o;if(!navigator.requestMIDIAccess)throw new Error("MIDI not supported in this browser.");await t.scan(),m()};function m(){const{midi:t}=o,{inputDeviceSelEl:i,outputDeviceSelEl:l}=p;let u=[];for(const c of t.knownInput())u.push(c.name??"?");i?.setOpts(u);let e=[];for(const c of t.knownOutput())e.push(c.name??"?");l?.setOpts(e)}function g(t){const{inputLog:i,chkEvFilterCc:l,chkEvFilterNotes:u,chkEvFilterPb:e,inputLastEl:c,chkOutFollow:r}=o;!u.checked&&(t.command==="noteoff"||t.command==="noteon")||!l.checked&&t.command==="cc"||!e.checked&&t.command==="pitchbend"||(r.checked&&(o.outChannel.value=t.channel,t.command==="cc"?(o.outVelocity.value=t.velocity,o.outCc.value=t.note):t.command==="noteoff"?o.outNote.value=t.note:t.command==="noteon"&&(o.outVelocity.value=t.velocity,o.outNote.value=t.note)),c.innerText=JSON.stringify(t),i.log(t))}const O=()=>{const{midi:t,mainLog:i}=o;t.addEventListener("message",e=>{g(e)}),t.addEventListener("open",e=>{i.log(`Opened: ${e.port.name} (${e.port.type})`)}),t.addEventListener("close",e=>{i.log(`Closed: ${e.port.name} (${e.port.type})`)}),t.addEventListener("deviceConnected",e=>{console.log(`deviceConnected ${e.port.name}`),d()}),t.addEventListener("deviceDisconnected",e=>{console.log(`deviceDisconnected ${e.port.name}`),d()});const l=n.select("#inputDevice",e=>{if(e==="Omni"){t.setOmniInput(!0);return}t.setOmniInput(!1);const c=t.findKnownPort(r=>r.name===e&&r.type==="input");c?t.open(c,!0):console.warn(`Could not find selected MIDI input: ${e}`)},{placeholderOpt:"Omni"}),u=n.select("#outputDevice",e=>{if(e==="Omni"){t.setOmniOutput(!0);return}t.setOmniOutput(!1);const c=t.findKnownPort(r=>r.name===e&&r.type==="output");c?t.open(c,!0):console.warn(`Could not find selected MIDI output: ${e}`)},{placeholderOpt:"Omni"});L({inputDeviceSelEl:l,outputDeviceSelEl:u}),n.button("#btnInputLogClear",()=>{o.inputLog.clear()}),n.button("#btnOutputLogClear",()=>{o.outputLog.clear()}),n.button("#btnSendCc",()=>{const e={command:"cc",channel:o.outChannel.value,velocity:o.outVelocity.value,note:o.outCc.value};a(e)}),n.button("#btnSendNote",()=>{const e={command:"noteon",channel:o.outChannel.value,velocity:o.outVelocity.value,note:o.outNote.value},c={command:"noteoff",channel:o.outChannel.value,velocity:0,note:o.outNote.value};a(e),setTimeout(()=>{a(c)},o.outNoteDuration.value)})};O();try{h()}catch(t){o.mainLog.error(t)}function L(t){p=Object.freeze({...p,...t})}
