import{b as r,i as h,d as e,p as i,f as a,a as n,v as l,g as o,t as u}from"./state-machine-ROMMoZIR.js";import{S as f}from"./simple-event-emitter-BaCTAiR9.js";class p extends f{#t;#i;#a;#s=!1;#n=!1;#e=r();constructor(t,s={}){super(),this.#a=s.debug??!1,this.#t=h(t,s.initial),this.#i=e(this.#t)}#r(t){this.#n!==t&&(this.#n=t,t?(this.#s=!0,setTimeout(()=>{this.#s&&(this.#s=!1,this.fireEvent("stop",{state:this.#t.value}))},2)):this.#s=!1)}get statesPossible(){return i(this.#t)}get statesDefined(){return Object.keys(this.#t.machine)}next(){const t=i(this.#t);return t.length===0?null:(this.state=t[0],t[0])}get isDone(){return a(this.#t)}reset(){this.#r(!1),this.#t=e(this.#i),this.#e=n()}validateTransition(t){l(this.#t,t)}isValid(t){return o(this.#t,t)}set state(t){const s=this.#t.value;t!==this.#t.value&&(this.#t=u(this.#t,t),this.#a&&console.log(`StateMachine: ${s} -> ${t}`),this.#e=n(),setTimeout(()=>{this.fireEvent("change",{newState:t,priorState:s})},1),a(this.#t)&&this.#r(!0))}get state(){return this.#t.value}get changedAt(){return this.#e()}get elapsed(){return this.#e()}}export{p as S};
