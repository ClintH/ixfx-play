import{r as o}from"./resolve-el-BUhvOf7L.js";import{g as u}from"./guard-BPeP3-pA.js";const d=n=>{if(typeof n!="object"||n===null)return{success:!1,error:"Value is null or not object type"};const t=Object.getPrototypeOf(n);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in n)&&!(Symbol.iterator in n)?{success:!0,value:n}:{success:!1,error:"Fancy object"}},p=n=>{const t=typeof n;return t==="symbol"?{success:!1,error:"Symbol type"}:t==="function"?{success:!1,error:"Function type"}:t==="bigint"?{success:!0,value:n}:t==="number"?{success:!0,value:n}:t==="string"?{success:!0,value:n}:t==="boolean"?{success:!0,value:n}:d(n)},a=Object.freeze({width:0,height:0}),l=Object.freeze({x:0,y:0,width:0,height:0}),b=(n,...t)=>{const e=getComputedStyle(o(n)),i={};for(const r of t){const s=e[r];if(typeof s=="string")if(s.endsWith("px"))i[r]=Number.parseFloat(s.substring(0,s.length-2));else throw new Error(`Property '${String(r)}' does not end in 'px'. Value: ${s}`);else throw new Error(`Property '${String(r)}' is not type string. Got: ${typeof s} Value: ${s}`)}return i};class c{#h;#s;#n;#i;#r;#c;#t;#o;#u=!1;#e;constructor(t,e){this.#t=o(t),this.#o=e.containerEl?o(e.containerEl):this.#t.parentElement,this.#h=e.stretch??"none",this.#c=e.onSetSize,this.#s=a;let i=e.naturalSize;i===void 0&&(i=this.#t.getBoundingClientRect()),this.#i=1,this.#n=i,this.setNaturalSize(i),this.#r=l,this.#o===document.body?this.#b():this.#l()}dispose(t){this.#u||(this.#u=!0,this.#e&&(this.#e.disconnect(),this.#e=void 0))}static canvasParent(t,e){const i=o(t);return new c(i,{...e,onSetSize(s,h){h.width=s.width,h.height=s.height,e.onSetSize&&e.onSetSize(s,h)}})}static canvasViewport(t,e){const i=o(t);i.style.position="absolute",i.style.zIndex=(e.zIndex??0).toString(),i.style.left="0px",i.style.top="0px";const r={...e,containerEl:document.body};return this.canvasParent(t,r)}static svgViewport(t,e){return new c(t,{containerEl:document.body,stretch:"both",onSetSize(r){t.setAttribute("width",r.width.toString()),t.setAttribute("height",r.height.toString()),e&&e(r)}})}#l(){const t=this.#o;if(!t)throw new Error("No container element");const e=new ResizeObserver(r=>{this.#f(r)});e.observe(t);const i=this.#a(t.getBoundingClientRect());this.size=i,this.#e=e}#b(){const t=new ResizeObserver(e=>{this.#d()});t.observe(document.documentElement),this.#e=t,this.#d()}#d(){this.size={width:window.innerWidth,height:window.innerHeight},this.#r={x:0,y:0,...this.size}}setNaturalSize(t){this.#n=t,this.#i=t.width/t.height}get naturalSize(){return this.#n}get viewport(){return this.#r}#a(t){let{width:e,height:i}=t,r=this.#h;if(r==="min"?r=e<i?"width":"height":r==="max"&&(r=e>i?"width":"height"),r==="width"?i=e/this.#i:r==="height"&&(e=i*this.#i),this.#t instanceof HTMLElement){const s=b(this.#t,"borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth");e-=s.borderLeftWidth+s.borderRightWidth,i-=s.borderTopWidth+s.borderBottomWidth}return{width:e,height:i}}#f(t){const e=t[0].contentBoxSize[0],i={width:e.inlineSize,height:e.blockSize};this.size=this.#a(i),this.#r={x:0,y:0,width:i.width,height:i.height}}set size(t){u(t,"size"),this.#s=t,this.#c(t,this.#t)}get size(){return this.#s}}export{c as E,l as a,a as b,p as t};
